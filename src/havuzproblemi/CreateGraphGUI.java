package havuzproblemi;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.geom.AffineTransform;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JOptionPane;

public class CreateGraphGUI extends javax.swing.JFrame {
    
    Image img;
    Graphics2D gfx;
    int circleSize = 25;
    int selected =1;
    
    HashMap<Integer,Point> location;
    HashMap<Integer,Node> nodes;
    HashMap<Integer,Edge> edges;
    List<Edge> kenarlar;
    HashMap<Integer,Integer> weights;
    
    ArrayList<ArrayList<Integer>> mfIterations;
    ArrayList<Integer> mfFlows;
    ArrayList<Integer> mcIterations;
    int mfIterationCount = 0;
    
    int nodeCount=0;
    int nodeId = 0;
    int nodeSize;
    int sourceNode;
    int sinkNode;
    int edgeId = 0;
    int weight=0;
    
    
    
    public CreateGraphGUI() {
        
        location = new HashMap<>();
        nodes = new HashMap<>();
        edges = new HashMap<>();
        weights = new HashMap<>();
        
        mfIterations= new ArrayList<>();
        mfFlows= new ArrayList<>();
        mcIterations= new ArrayList<>();
        
        initComponents();
        
        img = createGraphPanel.createImage(createGraphPanel.getWidth(), createGraphPanel.getHeight());
        gfx = (Graphics2D) img.getGraphics();
        
    }
    
    public void draw(){
        
        if(nodeCount<=nodeSize){
            
            for (int i = 0; i < location.size(); i++) {
                Point p = (Point) location.values().toArray()[i];
                gfx.fillOval(p.x - (circleSize/2), p.y- (circleSize/2), circleSize, circleSize);
                gfx.drawString("Node"+i, p.x - (circleSize/2), p.y- (circleSize/2));
            }
        }
        
        
       
        createGraphPanel.getGraphics().drawImage(img, 0, 0, this);
        System.out.println(nodes);
        
    }
    
    public void drawEdge(Edge edge,int w,Color c){
            
           Point pS = edge.getStartNode();
           Point pD = edge.getEndNode();
           
           drawArrow( img.getGraphics(), pS.x , pS.y, pD.x, pD.y, c, 1,w);
           System.out.println(edges);
           
           
            
        createGraphPanel.getGraphics().drawImage(img, 0, 0, this);
    }
    
    private static final Polygon ARROW_HEAD = new Polygon();

    static {
        ARROW_HEAD.addPoint(0, 0);
        ARROW_HEAD.addPoint(-15, -20);
        ARROW_HEAD.addPoint(15, -20);
    }

    public void drawArrow(Graphics g,int x,int y,int endX,int endY,Color color,int thickness, int weight) {
           
        Graphics2D g2 = (Graphics2D) g;
        double angle = Math.atan2(endY - y, endX - x);
        g2.setColor(color);
        g2.setStroke(new BasicStroke(thickness));
        g2.drawLine(x, y, (int) (endX - 10 * Math.cos(angle)), (int) (endY - 10 * Math.sin(angle)));
        if(weight>0){
            String str = " "+weight;
            g2.drawString(str, (x+endX)/2+10, (y+endY)/2);
        }
        
        AffineTransform tx = g2.getTransform();
        tx.translate(endX, endY);
        tx.rotate(angle - Math.PI / 2d);
        g2.setTransform(tx);
        g2.fill(ARROW_HEAD);
        
    }
    
    private int selectedNode(int xcoordinate, int ycoordinate){
        
        for (int i = 0; i < location.size(); i++) {
            Point thePoint = (Point) location.values().toArray()[i];
            int deltaX = xcoordinate - (thePoint.x - (circleSize/2));
            int deltaY = ycoordinate - (thePoint.y - (circleSize/2));
            if(Math.sqrt(deltaX * deltaX + deltaY*deltaY) <= circleSize+6){
                return (int) location.keySet().toArray()[i];
            }
        }
        
        return -1;
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g); //To change body of generated methods, choose Tools | Templates.
        draw();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bilgiPaneli = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nodeCountText = new javax.swing.JTextField();
        mfButton = new javax.swing.JButton();
        mcButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        mfLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sourceNodeText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        sinkNodeText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        mfIterationLabel = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        mcLabel = new javax.swing.JTextArea();
        createGraphPanel = new javax.swing.JPanel();
        nextIterationButton = new javax.swing.JButton();
        cleanImgButton = new javax.swing.JButton();
        weightLabel = new javax.swing.JLabel();
        weightText = new javax.swing.JTextField();
        weightOkButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Max-Flow / Min-Cut Uygulaması");
        setBackground(new java.awt.Color(51, 51, 255));

        bilgiPaneli.setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setText("Oluşturacağınız Grafın Düğüm Sayısını Giriniz");

        mfButton.setText("MAX-FLOW UYGULA");
        mfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mfButtonActionPerformed(evt);
            }
        });

        mcButton.setText("MİN-CUT UYGULA");
        mcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mcButtonActionPerformed(evt);
            }
        });

        okButton.setText("TAMAM");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        mfLabel.setFont(new java.awt.Font("Times New Roman", 2, 12)); // NOI18N
        mfLabel.setText("MAX-FLOW  SONUCU: ");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 2, 12)); // NOI18N
        jLabel2.setText("MAX-FLOW İTERASYONLARI:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 2, 12)); // NOI18N
        jLabel3.setText("MİN-CUT SONUCU KESİLMESİ GEREKEN KENARLAR:");

        jLabel4.setText("Başlangıc Düğümü Giriniz");

        jLabel5.setText("Bitiş Düğümünü Giriniz");

        mfIterationLabel.setColumns(20);
        mfIterationLabel.setFont(new java.awt.Font("Times New Roman", 2, 12)); // NOI18N
        mfIterationLabel.setRows(5);
        jScrollPane1.setViewportView(mfIterationLabel);

        mcLabel.setColumns(20);
        mcLabel.setFont(new java.awt.Font("Times New Roman", 2, 12)); // NOI18N
        mcLabel.setRows(5);
        jScrollPane2.setViewportView(mcLabel);

        javax.swing.GroupLayout bilgiPaneliLayout = new javax.swing.GroupLayout(bilgiPaneli);
        bilgiPaneli.setLayout(bilgiPaneliLayout);
        bilgiPaneliLayout.setHorizontalGroup(
            bilgiPaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bilgiPaneliLayout.createSequentialGroup()
                .addGroup(bilgiPaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bilgiPaneliLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(sourceNodeText, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bilgiPaneliLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bilgiPaneliLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(mcButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
            .addGroup(bilgiPaneliLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bilgiPaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addGroup(bilgiPaneliLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bilgiPaneliLayout.createSequentialGroup()
                        .addComponent(mfLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bilgiPaneliLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(bilgiPaneliLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(81, 81, 81))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bilgiPaneliLayout.createSequentialGroup()
                        .addGroup(bilgiPaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(bilgiPaneliLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(mfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(81, 81, 81))
                    .addGroup(bilgiPaneliLayout.createSequentialGroup()
                        .addGroup(bilgiPaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nodeCountText, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(sinkNodeText, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        bilgiPaneliLayout.setVerticalGroup(
            bilgiPaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bilgiPaneliLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nodeCountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(17, 17, 17)
                .addComponent(sourceNodeText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sinkNodeText, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mfLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mcButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        createGraphPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        createGraphPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                createGraphPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                createGraphPanelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout createGraphPanelLayout = new javax.swing.GroupLayout(createGraphPanel);
        createGraphPanel.setLayout(createGraphPanelLayout);
        createGraphPanelLayout.setHorizontalGroup(
            createGraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        createGraphPanelLayout.setVerticalGroup(
            createGraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 535, Short.MAX_VALUE)
        );

        nextIterationButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        nextIterationButton.setText("Iterasyon Atla");
        nextIterationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextIterationButtonActionPerformed(evt);
            }
        });

        cleanImgButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cleanImgButton.setText("TEMİZLE");
        cleanImgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanImgButtonActionPerformed(evt);
            }
        });

        weightLabel.setFont(new java.awt.Font("Times New Roman", 2, 12)); // NOI18N

        weightOkButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        weightOkButton.setText("Tamam");
        weightOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightOkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(weightLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(weightText, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(weightOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102)
                        .addComponent(cleanImgButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nextIterationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(createGraphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bilgiPaneli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bilgiPaneli, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(createGraphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(weightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(weightText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(weightOkButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cleanImgButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(nextIterationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createGraphPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createGraphPanelMousePressed
        
        selected = selectedNode(evt.getX(),evt.getY());
        
        if(selected == -1 && nodeCount<nodeSize){
            
            location.put(nodeId, new Point(evt.getX(),evt.getY()));
            
            Node node = new Node();
            node.setNodePoint(new Point(evt.getX(),evt.getY()));
            node.setNodeName("Node " +nodeId);
            
            nodes.put(nodeId,node);
            nodeId++;
            nodeCount++;
            
            draw();
        }
        
    }//GEN-LAST:event_createGraphPanelMousePressed

    private void createGraphPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createGraphPanelMouseReleased
        
        int destination = selectedNode(evt.getX(),evt.getY());
        
        if(destination != selected && destination > -1 && selected >-1){
            
            Edge edge = new Edge(selected,location.get(selected),destination,location.get(destination),0);
            edges.put(edgeId, edge);
            drawEdge( edge,0, Color.BLACK);
            weightLabel.setText(selected+"düğümü ile "+destination+"düğümü arasındaki ağırlığı giriniz:");
            edgeId++;
            
        }
        
        
    }//GEN-LAST:event_createGraphPanelMouseReleased

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

        if(!nodeCountText.getText().equals("") && !sourceNodeText.getText().equals("") && !sinkNodeText.getText().equals("")){
            nodeSize = Integer.parseInt(nodeCountText.getText());
            sourceNode = Integer.parseInt(sourceNodeText.getText());
            sinkNode = Integer.parseInt(sinkNodeText.getText());
        }else{
            
            JOptionPane.showConfirmDialog(rootPane, "Lütfen Boş Alanları Doldurunuz: ");
        }

    }//GEN-LAST:event_okButtonActionPerformed

    private void mcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mcButtonActionPerformed

        
        int[][] adjList = Graph.createAdjList(nodes,edges,weights);

        System.out.println("ADJANCENCY LİST");
        for(int i=0; i<adjList.length; i++) {
            for(int j=0; j<adjList[0].length; j++) {
                System.out.print(adjList[i][j]+"  " );
            }
            System.out.println();
        } 
        
        Min_Cut mc = new Min_Cut(nodeSize);
        mc.minCut(adjList, sourceNode, sinkNode);
        
        System.out.println("Kesilecek Kenar Sayısı:" + mc.getCutEdges().size());
        mcIterations = mc.getCutEdges();
        String cutEdges="";
        
        for (int i = 0; i < mcIterations.size(); i = i+2) {
            
            cutEdges += mcIterations.get(i) +"-"+ mcIterations.get(i+1) +"\n";
            
            
        }
        System.out.println("CUT EDGES:"+cutEdges);
        mcLabel.setText(cutEdges);
        
        for (int i = 0; i < mcIterations.size(); i+=2) {

                    Edge edge = new Edge(mcIterations.get(i),location.get(mcIterations.get(i))
                            ,mcIterations.get(i+1),location.get(mcIterations.get(i+1)),0);
                    drawEdge( edge,0, Color.LIGHT_GRAY);
            }
        
        

    }//GEN-LAST:event_mcButtonActionPerformed

    private void mfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mfButtonActionPerformed

        
        
        int[][] adjList = Graph.createAdjList(nodes,edges,weights);
        
        System.out.println("ADJANCENCY LİST");
        for(int i=0; i<adjList.length; i++) {
            for(int j=0; j<adjList[0].length; j++) {
                System.out.print(adjList[i][j]+"  " );
            }
            System.out.println();
        } 
        
        Max_Flow mf = new Max_Flow(nodeSize);
  
        mfLabel.setText("MAX-FLOW  SONUCU: "+mf.fordFulkerson(adjList, sourceNode, sinkNode)); 
        
        System.out.println("BULUNAN PATH SAYISI:" + mf.getPaths().size());
        mfIterations = mf.getPaths();
        mfFlows = mf.getPathFlows();
        String strIteration = "";
        
        for (int i = 0; i < mfIterations.size(); i++) {
            for (int j = 0; j < mfIterations.get(i).size(); j++) {
                strIteration += ""+mfIterations.get(i).get(j)+"-";
            }
            strIteration += "->>"+mfFlows.get(i)+ "\n";
        }
        System.out.println(strIteration);
        mfIterationLabel.setText(strIteration);

    }//GEN-LAST:event_mfButtonActionPerformed

    private void nextIterationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextIterationButtonActionPerformed

        if(mfIterationCount < mfIterations.size()){
            
            for (int i = 0; i < mfIterations.get(mfIterationCount).size()-1; i+=1) {

                    Edge edge = new Edge(mfIterations.get(mfIterationCount).get(i),location.get(mfIterations.get(mfIterationCount).get(i))
                            ,mfIterations.get(mfIterationCount).get(i+1),location.get(mfIterations.get(mfIterationCount).get(i+1)),0);
                    drawEdge( edge,0, Color.RED);
            }
            
            mfIterationCount++;
        }
        
        
    }//GEN-LAST:event_nextIterationButtonActionPerformed

    private void weightOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightOkButtonActionPerformed
        
        weight = Integer.parseInt(weightText.getText()); 
        weights.put(edgeId-1, weight);
        int lastEdge = edges.size()-1;
        drawEdge(edges.get(lastEdge),weight,Color.BLACK);
        weightText.setText("");
        System.out.println(weights);
        
        
    }//GEN-LAST:event_weightOkButtonActionPerformed

    private void cleanImgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanImgButtonActionPerformed

        for (int i = 0; i < edges.size(); i++) {
            
            drawEdge(edges.get(i),weights.get(i),Color.BLACK);
            
        }
        
    }//GEN-LAST:event_cleanImgButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateGraphGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bilgiPaneli;
    private javax.swing.JButton cleanImgButton;
    private javax.swing.JPanel createGraphPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton mcButton;
    private javax.swing.JTextArea mcLabel;
    private javax.swing.JButton mfButton;
    private javax.swing.JTextArea mfIterationLabel;
    private javax.swing.JLabel mfLabel;
    private javax.swing.JButton nextIterationButton;
    private javax.swing.JTextField nodeCountText;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField sinkNodeText;
    private javax.swing.JTextField sourceNodeText;
    private javax.swing.JLabel weightLabel;
    private javax.swing.JButton weightOkButton;
    private javax.swing.JTextField weightText;
    // End of variables declaration//GEN-END:variables

    

    
}
